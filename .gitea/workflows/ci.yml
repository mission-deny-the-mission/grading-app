name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build dev image
        run: |
          docker build -f Dockerfile.dev -t grading-app-dev:ci .

      - name: Create CI network
        run: |
          docker network create grading-app-ci || true

      - name: Start Redis
        run: |
          docker run -d --name grading-app-redis-ci \
            --network grading-app-ci \
            --health-cmd 'redis-cli ping || exit 1' \
            --health-interval 2s --health-timeout 5s --health-retries 30 \
            redis:7-alpine

      - name: Wait for Redis healthy
        run: |
          for i in $(seq 1 60); do
            status=$(docker inspect -f '{{.State.Health.Status}}' grading-app-redis-ci 2>/dev/null || echo 'starting')
            if [ "$status" = "healthy" ]; then echo "Redis is healthy"; exit 0; fi
            echo "Waiting for Redis... ($i) status=$status"; sleep 2;
          done
          echo "Redis did not become healthy in time"; docker logs grading-app-redis-ci; exit 1

      - name: Run tests (pytest)
        run: |
          # Sanity check: list files and ensure tests exist
          docker run --rm \
            -v "$PWD":/workspace \
            -w /workspace \
            grading-app-dev:ci \
            bash -lc "python -V && pip list | head -n 50 && ls -la && ls -la tests || true"

          # Collect-only to confirm discovery
          docker run --rm \
            -v "$PWD":/workspace \
            -w /workspace \
            grading-app-dev:ci \
            pytest --collect-only -q || true

          # Run the test suite explicitly against tests/ and generate coverage
          docker run --rm --name grading-app-test \
            --network grading-app-ci \
            -u root \
            -e REDIS_HOST=grading-app-redis-ci \
            -e REDIS_PORT=6379 \
            -e OPENROUTER_API_KEY=dummy \
            -e CLAUDE_API_KEY=dummy \
            -e LM_STUDIO_URL=http://localhost:1234/v1 \
            -v "$PWD":/workspace \
            -v "$PWD":/home/harry/grading-app \
            -w /workspace \
            grading-app-dev:ci \
            pytest -v tests/

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            htmlcov
            coverage.xml

      - name: Dump service logs on failure
        if: failure()
        run: |
          docker logs grading-app-redis-ci | sed -e 's/\x1b\[[0-9;]*m//g' || true

      - name: Cleanup
        if: always()
        run: |
          docker rm -f grading-app-redis-ci || true
          docker network rm grading-app-ci || true


