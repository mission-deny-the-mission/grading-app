name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build dev image
        run: |
          docker build -f Dockerfile.dev -t grading-app-dev:ci .

      - name: Create CI network
        run: |
          docker network create grading-app-ci || true

      - name: Start Redis
        run: |
          docker run -d --name grading-app-redis-ci \
            --network grading-app-ci \
            --health-cmd 'redis-cli ping || exit 1' \
            --health-interval 2s --health-timeout 5s --health-retries 30 \
            redis:7-alpine

      - name: Wait for Redis healthy
        run: |
          for i in $(seq 1 60); do
            status=$(docker inspect -f '{{.State.Health.Status}}' grading-app-redis-ci 2>/dev/null || echo 'starting')
            if [ "$status" = "healthy" ]; then echo "Redis is healthy"; exit 0; fi
            echo "Waiting for Redis... ($i) status=$status"; sleep 2;
          done
          echo "Redis did not become healthy in time"; docker logs grading-app-redis-ci; exit 1

      - name: Run tests (pytest)
        run: |
          # Sanity check: list files and ensure tests exist
          docker run --rm \
            -w /workspace \
            grading-app-dev:ci \
            bash -lc "python -V && pip list | head -n 50 && ls -la && ls -la tests || true"

          # Collect-only to confirm discovery
          docker run --rm \
            -w /workspace \
            grading-app-dev:ci \
            pytest --collect-only -q || true

          # Run the test suite explicitly against tests/ and generate coverage
          docker run --name grading-app-test \
            --network grading-app-ci \
            -u root \
            -e REDIS_HOST=grading-app-redis-ci \
            -e REDIS_PORT=6379 \
            -e OPENROUTER_API_KEY=dummy \
            -e CLAUDE_API_KEY=dummy \
            -e LM_STUDIO_URL=http://localhost:1234/v1 \
            -w /workspace \
            grading-app-dev:ci \
            bash -lc "mkdir -p /home/harry && [ ! -e /home/harry/grading-app ] && ln -s /workspace /home/harry/grading-app || true; pytest -v tests/"

      - name: Copy coverage artifacts
        if: always()
        run: |
          docker cp grading-app-test:/workspace/coverage.xml ./coverage.xml || true
          rm -rf htmlcov || true
          docker cp grading-app-test:/workspace/htmlcov ./htmlcov || true

      - name: Publish coverage in commit status and job summary
        if: always()
        env:
          GITEA_TOKEN: ${{ github.token }}
          SERVER_URL: https://gitea.harryslab.xyz
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
        run: |
          if [ -f coverage.xml ]; then
            pct=$(python - <<'PY'
import xml.etree.ElementTree as ET
try:
    root = ET.parse('coverage.xml').getroot()
    pct = None
    if 'line-rate' in root.attrib:
        pct = float(root.attrib['line-rate']) * 100.0
    else:
        lc = int(root.attrib.get('lines-covered', 0))
        lv = int(root.attrib.get('lines-valid', 0))
        pct = (lc / lv * 100.0) if lv else 0.0
    print(f"{pct:.0f}")
except Exception:
    print("0")
PY
)
            echo "Coverage: ${pct}%" >> "$GITHUB_STEP_SUMMARY" || true
            curl -s -X POST "${SERVER_URL}/api/v1/repos/${REPO}/statuses/${SHA}" \
              -H "Authorization: token ${GITEA_TOKEN}" -H "Content-Type: application/json" \
              -d "{\"state\":\"success\",\"description\":\"Coverage: ${pct}%\",\"context\":\"coverage/total\"}" || true
          fi

      - name: Update coverage badge on main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          if [ -f coverage.xml ]; then
            python - <<'PY'
import xml.etree.ElementTree as ET, json, os
def pct_from_xml(path='coverage.xml'):
    root = ET.parse(path).getroot()
    if 'line-rate' in root.attrib:
        return float(root.attrib['line-rate']) * 100.0
    lc = int(root.attrib.get('lines-covered', 0))
    lv = int(root.attrib.get('lines-valid', 0))
    return (lc / lv * 100.0) if lv else 0.0
pct = round(pct_from_xml())
color = 'red' if pct < 60 else ('yellow' if pct < 80 else 'green')
data = {
  "schemaVersion": 1,
  "label": "coverage",
  "message": f"{pct}%",
  "color": color
}
os.makedirs('badges', exist_ok=True)
with open('badges/coverage.json', 'w') as f:
    json.dump(data, f)
print(f"Wrote badges/coverage.json with {pct}% ({color})")
PY
            if ! git diff --quiet -- badges/coverage.json 2>/dev/null; then
              git config user.name "gitea-actions"
              git config user.email "actions@local"
              git add badges/coverage.json
              git commit -m "chore(ci): update coverage badge [skip ci]"
              git push origin HEAD:main || true
            fi
          fi

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            htmlcov
            coverage.xml

      - name: Dump service logs on failure
        if: failure()
        run: |
          docker logs grading-app-redis-ci | sed -e 's/\x1b\[[0-9;]*m//g' || true

      - name: Cleanup
        if: always()
        run: |
          docker rm -f grading-app-test || true
          docker rm -f grading-app-redis-ci || true
          docker network rm grading-app-ci || true


